var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API Reference","title":"API","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"This is a list of documentation associated with every single exported function or object from NoteMate.jl. There are a few different sections with a brief explanation of what these sections are followed by relevant functions.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api/#Structs","page":"API Reference","title":"Structs","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"These are the core objects used to represent various note species within NoteMate.jl. They are designed to be extended or parsed as needed:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"FranklinNote\nNote","category":"page"},{"location":"api/#NoteMate.FranklinNote","page":"API Reference","title":"NoteMate.FranklinNote","text":"FranklinNote\n\nStruct representing a Note to be deployed to a Franklin website.\n\nA note headed for expression as a Franklin markdown and then a webpage requires additional metadata demanded by Franklin to      execute the whole conversion, including information for the RSS feed.\n\n\n\n\n\n","category":"type"},{"location":"api/#NoteMate.Note","page":"API Reference","title":"NoteMate.Note","text":"Struct representing a note in Zettelkasten\n\nThe generic Open Knowledge Model note with its key structures, isolated as single strings and some further metadata in appropiate  types. Within the constraints of NoteMate this is the generic type to which any note from any specific format parses down, and from  which other note structures for representation targets are build using templating functions.\n\n\n\n\n\n","category":"type"},{"location":"api/#Parsing","page":"API Reference","title":"Parsing","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"These functions are built to parse different sorts of files into NoteMate.jl objects (i.e. structs). Multiple sections exist to denote what markup languages are able to be parsed as of now:","category":"page"},{"location":"api/#Markdown","page":"API Reference","title":"Markdown","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"The parsing for NoteMate.jl supports Markdown – specifically, CommonMark Markdown is supported but support for other variants could be added in the future:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"find_citation_groups\ncreate_inline_citations\ncreate_references\nfind_markdown_links\ncreate_relative_links\nget_headers\nget_sections\nget_title_section","category":"page"},{"location":"api/#NoteMate.find_citation_groups","page":"API Reference","title":"NoteMate.find_citation_groups","text":"Given text and a regular expression that matches a citation group (e.g. pandoc, etc.), extract and return a vector of citation groups from within that text.\n\nArguments\n\ntext::String - text to be processed\n\nKeyword Arguments\n\nkey_regex::Regex - regular expression to capture citation groups; default captures citation key groups of the form, [@citation] or [@citation_1; @citation_2]\n\nReturns\n\nVector of strings with captured citation key groups\n\n\n\n\n\n","category":"function"},{"location":"api/#NoteMate.create_inline_citations","page":"API Reference","title":"NoteMate.create_inline_citations","text":"Given a list of citation key groups, create inline citations based on a given CSL and a bibliography provided in bibtex.\n\nArguments\n\ncitation_groups::Vector{String} - a vector of strings containing citation key groups \nbibtex_path::String - path to a bibliography (.bib format supported)\ncsl_path::String - path a a CSL standard (i.e. .csl format)\n\nReturns\n\nDict with keys as the original citation groups and values as their corresponding inline citation\n\n\n\n\n\n","category":"function"},{"location":"api/#NoteMate.create_references","page":"API Reference","title":"NoteMate.create_references","text":"Given a list of citation key groups, create a reference list based on a given CSL and a bibtex bibliography. \n\nArguments\n\ncitation_groups::Vector{String} - a vector of strings containing citation key groups \nbibtex_path::String - path to a bibliography (.bib format supported)\ncsl_path::String - path a a CSL standard (i.e. .csl format)\n\nReturns\n\nString containing an ordered reference list \n\n\n\n\n\n","category":"function"},{"location":"api/#NoteMate.find_markdown_links","page":"API Reference","title":"NoteMate.find_markdown_links","text":"Given text and a regular expression that matches a markdown link, extract and return a vector of markdown links from within that text.\n\nArguments\n\ntext::String - text to be processed\n\nKeyword Arguments\n\nkey_regex::Regex - regular expression to capture markdown links; default captures markdown links of the form, [linked text](https:://duckduckgo.com)\ngroup_links::Bool - a boolean that determines if the function should try to determine what kind of link a markdown link is (e.g. a website link, a relative file link, etc.) and returns a dictionary instead of a vector with only the links\n\nReturns\n\nVector of strings with captured markdown links \n\n\n\n\n\n","category":"function"},{"location":"api/#NoteMate.create_relative_links","page":"API Reference","title":"NoteMate.create_relative_links","text":"Given a list of strings denoting a markdown link of the form [text](link), update the link to a relative link format.\n\nArguments\n\nlink_strings::Vector - markdown links to be processed\n\nKeyword Arguments\n\nprefix::String - a prefix to add to each link; default is \"\"\n\nReturns\n\nDict with keys as the original markdown links and values as their corresponding revised relative links \n\n\n\n\n\n","category":"function"},{"location":"api/#NoteMate.get_headers","page":"API Reference","title":"NoteMate.get_headers","text":"get_headers()\n\nFinds all the MarkDown headers in a file's parse tree. \n\nArguments\n\ncontents: The Vector of content structs of a MD struct from Julia standard library Markdown.parse\n\nReturns\n\nThe vector of all headers in the parsed Markdown document\n\n\n\n\n\n","category":"function"},{"location":"api/#NoteMate.get_sections","page":"API Reference","title":"NoteMate.get_sections","text":"get_sections\n\nSeparate a whole parsed Markdown document into blocks of the text between headers. \n\nArguments\n\ncontents: The Vector of content structs of a MD struct from Julia standard library Markdown.parse\nheaders: Vector of Header structs that are found in the submitted document \n\nKeyword Arguments\n\nname_sections = true: boolean setting to get a dictionary instead of a vector.\n\nReturns\n\nBy default, a dictionary of the headers first word as key and the sections between the headers \nA Vector of all section texts between the headers of the document \n\n\n\n\n\n","category":"function"},{"location":"api/#NoteMate.get_title_section","page":"API Reference","title":"NoteMate.get_title_section","text":"get_title_section\n\nGet the sections that sit underneath title headers. \n\nArguments\n\ncontents: The Vector of content structs of a MD struct from Julia standard library Markdown.parse\ntitle_headers: Vector of Header structs that are considered title headers\n\nKeyword Arguments\n\nname_sections = true: boolean setting to get a dictionary instead of a vector.\n\nReturns\n\nBy default, a dictionary of the title section under the \"Title\" key \nA Vector of all section texts started by title headers  \n\n\n\n\n\n","category":"function"},{"location":"api/#Targeting","page":"API Reference","title":"Targeting","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"After parsing a note into a NoteMate.jl object, these functions support translating each object into a specified target output. These targets are designed to quickly translate one's note to a publishable artifact for the internet (or other future supported platforms). The following sections denote functions that support a given target: ","category":"page"},{"location":"api/#Franklin","page":"API Reference","title":"Franklin","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Franklin.jl is a static site generator written in the Julia programming language. It uses its own variant of markdown called \"Franklin Markdown\" to assist in publishing content to the web:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"create_franklin_note\ngenerate_franklin_template\ngenerate_note_summary\ngenerate_bibliography\ngenerate_citation\ngenerate_references\ngenerate_comments\ngenerate_table_of_contents","category":"page"},{"location":"api/#NoteMate.create_franklin_note","page":"API Reference","title":"NoteMate.create_franklin_note","text":"create_franklin_note(note::Note; date_format::String = \"U d y\")\n\nTransform a generic Note into a [FranklinNote](@ref) data structure with special metadata from Note content.\n\nArguments\n\nnote: a Note object that will be used for conversion\n\nKeyword Arguments\n\ndate_format: a String that accepts a date format; default \"U d y\" (see: Dates.format for options)\n\nReturn\n\nA newly prepared FranklinNote object\n\n\n\n\n\n","category":"function"},{"location":"api/#NoteMate.generate_franklin_template","page":"API Reference","title":"NoteMate.generate_franklin_template","text":"generate_franklin_template()\n\nGenerates a template for a Franklin markdown page.\n\nKeyword Arguments\n\ntitle: Page title. Default is nothing\nslug: Specifies web page url path (after base path). Default is nothing \ntags: Keywords or tags associated with page. Default is nothing \ndescription: Description of page contents. Default is nothing \nrss_title: Page title that shows up on RSS feeds. Default is nothing \nrss_description: Description that goes along with RSS updates. Default is nothing \nrss_pubdate: Publication date for RSS feed. Default is nothing\n\nThese kwargs are \"page variables\" that come directly from Franklin.jl's documentation. For more specific details, please see Page Variables \n\nReturn\n\nA String object that contains a valid Franklin template that can then be modified further\n\nExample\n\nIf the following call is made: generate_franklin_template(; title = \"All-Payer Claims Database\", tags = [\"apcd\", \"claims\", \"database\"]), the following string will be returned:\n\n+++\n\ntitle = \"All-Payer Claims Database\"\n\ntags = [\"zettel\", \"apcd\", \"claims\", \"database\", \"archive\"]\n\n+++\n\n\nThis can then be edited or formatted further as needed.\n\n\n\n\n\n","category":"function"},{"location":"api/#NoteMate.generate_note_summary","page":"API Reference","title":"NoteMate.generate_note_summary","text":"generate_note_summary\n\nGenerate a note summary section using note title, publishing date, rss summary and any keywords.\n\nArguments\n\nnote: a FranklinNote struct whose information is formated for the note summary section\n\nReturn\n\na string formated according to the Open Knowledge Model standard for Franklin, starting with a note title, followed by the Date in monthname day year form, the RSS summary of the note, and comma-separated keywords for the note.\n\nAn example formating: \n\nExample title:\n=========\n\n**Date:** May 12 2020\n\n**Summary:** This is the summary of an example note\n\n**Keywords:** example files, demonstration, documentation\n\n\n\n\n\n","category":"function"},{"location":"api/#NoteMate.generate_bibliography","page":"API Reference","title":"NoteMate.generate_bibliography","text":"generate_bibliography\n\nGenerate a bibliography section for a Franklin page. \n\nArguments\n\nnote: a FranklinNote struct whose bibliography string will be included in the output\n\nReturn\n\na string starting with a Fraklin section header, followed after a double newline by the bibliography string stored in the note struct. \n\n\n\n\n\n","category":"function"},{"location":"api/#NoteMate.generate_citation","page":"API Reference","title":"NoteMate.generate_citation","text":"generate_citation()\n\nGenerate the citation string that can be used to reference the page of this document. \n\nArguments\n\nnote: a FranklinNote struct whose information will be used to format the citation strings\n\nKeyword Arguments\n\ncitations : TODO clarify type and structure here \n\nReturn\n\nReturn string always begin with ## How to Cite\\n\\n followed by either:\n\nif the citation argument is empty, returns a standard citation string with primary author name, note title, homepage link and monthname day year date.\nif the citation argument is non-empty, will generate a longer citation string with list of all authors before note title, homepage link and monthname day year date.\n\nFIXME: This is currently hardcoded for my own personal website. We need to adjust this to not be that way.\n\n\n\n\n\n","category":"function"},{"location":"api/#NoteMate.generate_references","page":"API Reference","title":"NoteMate.generate_references","text":"generate_references\n\nReturns the references string for the note. \n\nArguments\n\nnote: a FranklinNote struct whose references string will be included in the output\n\nReturn\n\nthe note references string as is, without further formating\n\n\n\n\n\n","category":"function"},{"location":"api/#NoteMate.generate_comments","page":"API Reference","title":"NoteMate.generate_comments","text":"generate_comments()\n\nGenerates a Fraklin page macro to embed a comments section into a page.\n\nReturn\n\nA string containing a Franklin macro to add comments to a Franklin page. See Franklin Utils for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#NoteMate.generate_table_of_contents","page":"API Reference","title":"NoteMate.generate_table_of_contents","text":"generate_table_of_contents()\n\nGenerate a hyperlinked Table of Contents for a Franklin page.\n\nReturn\n\nA string containing a Franklin macro to add a table of contents to a Franklin page. See Table of Contents for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Miscellaneous","page":"API Reference","title":"Miscellaneous","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"These functions are mostly for occasional use or do not fit cleanly into anyone section yet.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"sync_file","category":"page"},{"location":"mkd_franklin_tutorial/#Transforming-Markdown-Notes-To-a-Given-Target","page":"Markdown Tutorial","title":"Transforming Markdown Notes To a Given Target ⚗️","text":"","category":"section"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"This workflow explains how one could parse a Markdown note to a NoteMate target and utilize the full suite of tools within NoteMate. In this tutorial, we will take a Markdown note to a Franklin.jl target output note. It is an implementation suggestion that one does not have to follow strictly but serves as a starting point in developing one's own workflow. ","category":"page"},{"location":"mkd_franklin_tutorial/#Requirements","page":"Markdown Tutorial","title":"Requirements 🚨","text":"","category":"section"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"To follow this tutorial, create a separate project directory – I will refer to it as projdir going forward – on your computer, activate Julia, and add the following packages to your project:","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"pkg> add Dates\npkg> add Markdown\npkg> add NoteMate","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"Now, we need to copy four files into projdir from the Appendix:","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"Sample Note - copy the content in this file and put it into a file called note.md within projdir.\nIEEE CSL - copy the content in this file and put it into a file called ieee.csl within projdir.\nBibTeX References - copy the content in this file and put it into a file called refs.bib within projdir.\nProcessing Script - copy the content in this file and put it into a file called script.jl within projdir.","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"Once you have copied these files into the projdir, we are ready to go! The following steps will guide you through different pieces of script.jl and how NoteMate works in supporting note processing workflows.  At any point, you can run the full script within projdir to test it out.","category":"page"},{"location":"mkd_franklin_tutorial/#Pre-Processing-of-a-Markdown-Note","page":"Markdown Tutorial","title":"Pre-Processing of a Markdown Note 🚧","text":"","category":"section"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"To process this note into a NoteMate understandable object, NoteMate provides a series of tools to make some of the rudimentary parsing easier. To get started, we will read this file as a String:","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"note = read(\"note.md\", String)","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"The reason why we read this as a String is so that we can do pattern matching to apply various transformations to the raw representation of the note.","category":"page"},{"location":"mkd_franklin_tutorial/#Generating-Citations","page":"Markdown Tutorial","title":"Generating Citations 📚","text":"","category":"section"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"Let's first extract and replace the citation keys present within this note with their correct inline citations:","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"# See Steps 1 & 2\ncitation_keys = find_citation_groups(note) \n\n# See Steps 3 & 4\ninline_citations_dict = create_inline_citations(citation_keys, \"refs.bib\", \"ieee.csl\")\n\n# See Step 5\nnote = replace(note, inline_citations_dict...)","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"Here is what this code block does: ","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"Find all the citation groups within the String using find_citation_groups().","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"This returns a vector with all the unique citation groups found within the String.","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"Store this result in the citation_keys variable.\nDefine the actual inline reference representation for the found citation keys using create_inline_citations().","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"This function utilizes refs.bib to map the citation keys found in the String to the correct reference information. Once each key's reference information was found, the ieee.csl file defines how the inline citation should appear within the final note.","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"Store this mapping within inline_citations_dict \nNow, we replace all respective citation groups with their appropriate inline citation.","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"NOTE: What Will Inline Citations Look Like? As we are using the IEEE CSL format, citation groups that look like this: [@chase1973mind, @simon1973american] will be rendered to look something like this in the document [3, 4].","category":"page"},{"location":"mkd_franklin_tutorial/#Updating-Link-Paths","page":"Markdown Tutorial","title":"Updating Link Paths 🏔️","text":"","category":"section"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"Next, let's scan the document for any links and see which one are relative links.","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"NOTE: What Is a Relative Link? These are links that are made within a document that references another note or object within the same directory as the initial document.  We want to preserve these relationships as they are transformed so as to not lose this information in an eventual deployment.","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"To do this, we will use the following code snippet:","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"# See Steps 1 & 2\nmarkdown_links = find_markdown_links(note, group_links = true)\n\n# See Steps 3 & 4\nrelative_links_dict = create_relative_links(markdown_links[\"relative_links\"])\n\n# See Steps 5\nnote = replace(note, relative_links_dict...)","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"To accomplish this, we will use the following process:","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"Find all markdown links in a String using find_markdown_links().","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"By setting the keyword argument, group_links = true, a dictionary of vectors is returned that defines web links (links that link to somewhere on the internet), anchor links (links that jumps to a specific place in a document) or relative links.","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"Store links within markdown_links.\nUsing markdown_links, we can use the create_relative_links(), to update or finalize relative links that were found before deployment to a target output.\nStore this mapping within relative_links_dict.\nFinally, we replace all relative links with their newly updated path.","category":"page"},{"location":"mkd_franklin_tutorial/#Processing-an-OKM-Note-by-Each-Component","page":"Markdown Tutorial","title":"Processing an OKM Note by Each Component 🛠️","text":"","category":"section"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"With pre-processing complete, we can now start ingesting the specifics of the note into OKM components. In particular, we will ingest the following components:","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"Title Block - this is a unique block that begins with the name of the note followed by three required subcomponents:","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"- **Date** - the date the note was created\n\n- **Summary** - a brief, single sentence summary of what this note is about\n\n- **Keywords** - keywords that can be used to find or associated with the content of this note","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"Bibliography Block - this contains the bibliographic information that is associated with the specific note \nNotes - where one's notes go on the note subject in whatever format one so chooses\nReferences - list of references used in the note","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"To start, we use Markdown.parse() to generate a parsed representation of the note to turn it into a Julia-understandable Markdown representation:","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"parsed_note = Markdown.parse(note)","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"From there, the note can be parsed readily as a Julia Markdown object. NoteMate offers some utility functions to help with this parsing as shown below:","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"note_headers = get_headers(parsed_note.content)\ntitle_header = filter(x -> typeof(x) <: Header{1}, note_headers)\nsection_headers = filter(x -> typeof(x) <: Header{2}, note_headers)\n\nsections = get_sections(parsed_note.content, section_headers; name_sections=true)\ntitle_section = get_title_section(parsed_note.content, title_header; name_sections=true)\nreferences_section = create_references(citation_keys, bibtex_path, csl_path)\nnote_sections = merge!(sections, title_section)\nnote_sections[\"References\"] = (note_sections[\"References\"][1] |> plain) * \"\\n\" * references_section |> parse |> x -> x.content\n\ntitle_section = note_sections[\"Title\"]\nbibliography_section = note_sections[\"Bibliography\"][2] |> plain\nnotes_section = note_sections[\"Notes\"][2:end] |> plain\nreferences_section = note_sections[\"References\"] |> plain\n\ntitle = title_section[1].text[1] |> x -> replace(x, \"\\\"\" => \"'\")\ndate = title_section[2].content[2] |> strip\nsummary = title_section[3].content[2] |> strip |> x -> replace(x, \"\\\"\" => \"'\")\nkeywords = title_section[4].content[2] |> strip","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"In lieu of explaining all particulars here, here is the general process in how this code block works:","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"get_headers() finds all the Markdown headers in the parsed_note structure.\nget_sections() will further parse available headers and cut the document apart with all text between each heading isolated as one section.\nget_title_section(), gets the single section under the first Header{1} and allows it to be parsed into multiple OKM components. \ncreate_references() uses the function to generate full references for a note's reference component using the citation_keys variable generated earlier. \nA combination of various filters are then used to do additional component splitting and parsing to ingest all needed information into the required OKM components.","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"Then, we can create a NoteMate Note object:","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"note = Note(title, date, summary, keywords, bibliography_section, references_section, notes_section, basename(\"notes.md\"), \"notes.md\", \"ieee.csl\", \"refs.bib\")","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"NOTE: Note parsing seems too fragile? If you noticed that parsing this note into each component seemed brittle or too fragile, this is both a strength and a weakness of the OKM. The OKM is flexible enough to allow one to implement the OKM however way they want which gives a lot of flexibility to usage. However, it comes at the cost that any implementation will need to be parsed according to the way it was implemented into a NoteMate `Note`.","category":"page"},{"location":"mkd_franklin_tutorial/#Targeting-Franklin.jl-as-an-Output-Target","page":"Markdown Tutorial","title":"Targeting Franklin.jl as an Output Target 🎯","text":"","category":"section"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"With the note parsed into an OKM Note object, we can now use NoteMate tools to create a Franklin.jl compliant output.  We use create_franklin_note() to created a FranklinNote object that is used by NoteMate and generate_franklin_template() to generate the initial page set-up with necessary Franklin specific syntax mark-up:","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"franklin_note_raw = create_franklin_note(note)\n\nfranklin_note = \"\"\nfranklin_note = franklin_note * generate_franklin_template(title=franklin_note_raw.title, slug=franklin_note_raw.slug, tags=franklin_note_raw.tags, description=franklin_note_raw.description, rss_title=franklin_note_raw.rss_title, rss_description=franklin_note_raw.rss_description, rss_pubdate=franklin_note_raw.rss_pubdate)","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"From here, NoteMate provides a variety of tools that accept a FranklinNote to generate content for a note written using Franklin markup.  Here is an example of how this is done: ","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"# Generate summary section\nfranklin_note = franklin_note * generate_note_summary(franklin_note_raw)\n\n# Generate bibliography section\nfranklin_note = franklin_note * generate_bibliography(franklin_note_raw)\n\n# Generate a Franklin Table of Contents\nfranklin_note = franklin_note * generate_table_of_contents()\n\n# Add note content into the Franklin page\nfranklin_note = franklin_note * franklin_note_raw.notes\n\n# Generate a references output section\nfranklin_note = franklin_note * generate_references(franklin_note_raw)\n\n# Write the final note to a file\nwrite(\"franklin_note.md\", franklin_note)","category":"page"},{"location":"mkd_franklin_tutorial/#Congratulations!-You-Just-Converted-Your-First-Note!","page":"Markdown Tutorial","title":"Congratulations! You Just Converted Your First Note! 🥳","text":"","category":"section"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"Congratulations!  This illustrates a potential workflow using NoteMate to go from OKM-compliant Markdown notes to a Franklin note! The final Franklin note then could be directly added to a Franklin-based website deployment and rendered on the internet. This example workflow shows a potential path one could take using NoteMate to ingest an OKM-compliant note and produce an output. Additional functionality could be added to a workflow to, for example, iterate through one's entire note base, add custom sections to a specific output one would want, or swap citation styles on the fly. With the scripting ability enabled by NoteMate to iteratively build notes, the possibilities are numerous.","category":"page"},{"location":"mkd_franklin_tutorial/#Appendix","page":"Markdown Tutorial","title":"Appendix 🔍","text":"","category":"section"},{"location":"mkd_franklin_tutorial/#Sample-Note","page":"Markdown Tutorial","title":"Sample Note","text":"","category":"section"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"using Markdown \n\nMarkdown.parse(\"\"\"\n```markdown\n$(read(\"./resources/note.txt\", String))\n```\n\"\"\")","category":"page"},{"location":"mkd_franklin_tutorial/#IEEE-CSL","page":"Markdown Tutorial","title":"IEEE CSL","text":"","category":"section"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"using Markdown \n\nMarkdown.parse(\"\"\"\n```text\n$(read(\"./resources/ieee.csl\", String))\n```\n\"\"\")","category":"page"},{"location":"mkd_franklin_tutorial/#BibTeX-References","page":"Markdown Tutorial","title":"BibTeX References","text":"","category":"section"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"using Markdown \n\nMarkdown.parse(\"\"\"\n```latex\n$(read(\"./resources/refs.bib\", String))\n```\n\"\"\")","category":"page"},{"location":"mkd_franklin_tutorial/#Full-Script","page":"Markdown Tutorial","title":"Full Script","text":"","category":"section"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"Here was the full script that was developed in the course of this tutorial:","category":"page"},{"location":"mkd_franklin_tutorial/","page":"Markdown Tutorial","title":"Markdown Tutorial","text":"using Markdown \n\nMarkdown.parse(\"\"\"\n```julia\n$(read(\"./resources/mkd_franklin_tutorial_script.jl\", String))\n```\n\"\"\")","category":"page"},{"location":"resources/franklin_note/","page":"How Big Is a Chunk?","title":"How Big Is a Chunk?","text":"+++ title = \"How Big Is a Chunk?\" slug = \"notes\" tags = [\"chunk\", \"memory\", \"bit\", \"unit\", \"bibliography\", \"archive\"] description = \"An interesting foundation for the notion of 'chunking' in memory and education research\" rsstitle = \"How Big Is a Chunk?\" rssdescription = \"An interesting foundation for the notion of 'chunking' in memory and education research\" rss_pubdate = Date(2023, 1, 7) +++","category":"page"},{"location":"resources/franklin_note/#How-Big-Is-a-Chunk?","page":"How Big Is a Chunk?","title":"How Big Is a Chunk?","text":"","category":"section"},{"location":"resources/franklin_note/","page":"How Big Is a Chunk?","title":"How Big Is a Chunk?","text":"Date: January 7 2023","category":"page"},{"location":"resources/franklin_note/","page":"How Big Is a Chunk?","title":"How Big Is a Chunk?","text":"Summary: An interesting foundation for the notion of 'chunking' in memory and education research","category":"page"},{"location":"resources/franklin_note/","page":"How Big Is a Chunk?","title":"How Big Is a Chunk?","text":"Keywords: #chunk #memory #bit #unit ##bibliography #archive","category":"page"},{"location":"resources/franklin_note/#Bibliography","page":"How Big Is a Chunk?","title":"Bibliography","text":"","category":"section"},{"location":"resources/franklin_note/","page":"How Big Is a Chunk?","title":"How Big Is a Chunk?","text":"H. A. Simon, \"How Big Is a Chunk? By combining data from several experiments, a basic human memory unit can be identified and measured.,\" Science, vol. 183, no. 4124, pp. 482–488, 1974.","category":"page"},{"location":"resources/franklin_note/#Table-of-Contents","page":"How Big Is a Chunk?","title":"Table of Contents","text":"","category":"section"},{"location":"resources/franklin_note/","page":"How Big Is a Chunk?","title":"How Big Is a Chunk?","text":"\\toc","category":"page"},{"location":"resources/franklin_note/#Reading-Motivation","page":"How Big Is a Chunk?","title":"Reading Motivation","text":"","category":"section"},{"location":"resources/franklin_note/","page":"How Big Is a Chunk?","title":"How Big Is a Chunk?","text":"In reading a piece by Michael Nielsen on using spaced repetition to process mathematics [1], he referenced a concept called \"chunking\". I hadn't encountered this notion in education research before and thought it sounded interesting.  So, thus reading the paper.","category":"page"},{"location":"resources/franklin_note/#What-Are-Chunks?","page":"How Big Is a Chunk?","title":"What Are Chunks?","text":"","category":"section"},{"location":"resources/franklin_note/","page":"How Big Is a Chunk?","title":"How Big Is a Chunk?","text":"Loosely based on [2], chunks are constructs which organize and group together units of information input into memory. These inputs can be of any form and the basic units could be things like phonemes in words, moves in chess, etc. that can then be recalled at once (a Bible verse, a Sicilian Defense, etc.). The material stored in a chunk is independent of how many chunks can be generated.","category":"page"},{"location":"resources/franklin_note/#Benefits-of-Chunk-Generation","page":"How Big Is a Chunk?","title":"Benefits of Chunk Generation","text":"","category":"section"},{"location":"resources/franklin_note/","page":"How Big Is a Chunk?","title":"How Big Is a Chunk?","text":"The memory span seems to be constrained by a fixed number of chunks (although this number varies wildly in the paper).  However, we can increase the information stored in memory by increasing the number of units belonging to each chunk. [2]","category":"page"},{"location":"resources/franklin_note/","page":"How Big Is a Chunk?","title":"How Big Is a Chunk?","text":"As regaled by Simon, an example of chunking in action is this:","category":"page"},{"location":"resources/franklin_note/","page":"How Big Is a Chunk?","title":"How Big Is a Chunk?","text":"I tried to recall after one reading the following list of words: Lincoln, milky, criminal, differential, address, way, lawyer, calculus, Gettysburg. I had no success whatsoever. I should not have expected success, for the list exceeded my span of six or seven words. Then I rearranged the list a bit, as follows:Lincoln's Gettysburg Address\nMilky Way\nCriminal Lawyer\nDifferential CalculusI had no difficulty at all","category":"page"},{"location":"resources/franklin_note/","page":"How Big Is a Chunk?","title":"How Big Is a Chunk?","text":"The variance between chunks and memory can be attributed to larger chunk sizes based on one's expertise with a material. [4]","category":"page"},{"location":"resources/franklin_note/#References:","page":"How Big Is a Chunk?","title":"References:","text":"","category":"section"},{"location":"resources/franklin_note/","page":"How Big Is a Chunk?","title":"How Big Is a Chunk?","text":"[1] M. Nielsen, “Using spaced repetition systems to see through a piece of mathematics,” 2019. http://cognitivemedium.com/srs-mathematics","category":"page"},{"location":"resources/franklin_note/","page":"How Big Is a Chunk?","title":"How Big Is a Chunk?","text":"[2] G. A. Miller, “The magical number seven, plus or minus two: Some limits on our capacity for processing information.” Psychol. Rev., vol. 63, no. 2, p. 81, 1956.","category":"page"},{"location":"resources/franklin_note/","page":"How Big Is a Chunk?","title":"How Big Is a Chunk?","text":"[3] W. G. Chase and H. A. Simon, “The mind’s eye in chess,” in Visual information processing, Elsevier, 1973, pp. 215–281.","category":"page"},{"location":"resources/franklin_note/","page":"How Big Is a Chunk?","title":"How Big Is a Chunk?","text":"[4] H. A. Simon and W. G. Chase, “American scientist,” Scientist, vol. 61, no. 4, pp. 394–403, 1973.","category":"page"},{"location":"structure/#Structure-of-NoteMate","page":"Structure of NoteMate","title":"Structure of NoteMate","text":"","category":"section"},{"location":"structure/","page":"Structure of NoteMate","title":"Structure of NoteMate","text":"NoteMate is structured on the concept of the Open Knowledge Model (OKM) which is an open specification that minimally prescribes the structure of notes ingested by NoteMate. To process notes that are compliant with the OKM, NoteMate offers three main components: ","category":"page"},{"location":"structure/","page":"Structure of NoteMate","title":"Structure of NoteMate","text":"Input Parsing - parsing tools for various note structures and filetypes. \nIntermediate Structures - internal and external objects defined by NoteMate.\nTarget Outputs - tools for generating an output made to a specific target.","category":"page"},{"location":"structure/","page":"Structure of NoteMate","title":"Structure of NoteMate","text":"At its core, NoteMate is a toolbox for transforming information into various outputs with a focus on personal notes. It is designed to be flexible enough so that one can adapt personal note structures into targets supported by NoteMate while sufficiently constrained to have well-defined APIs that can be consumed in other packages or projects more readily.","category":"page"},{"location":"#Welcome-to-the-NoteMate.jl-Docs!","page":"Home","title":"Welcome to the NoteMate.jl Docs! 👋","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The perfect companion for working with your notes 📚","category":"page"},{"location":"","page":"Home","title":"Home","text":"NoteMate.jl is a programmatic transformation tool used to parse and manipulate notes whose structure follows the Open Knowledge Model (OKM). The goal of NoteMate.jl is to enable one to focus only on writing without worry of needing to add any special markup to your note while having the benefits of quickly sharing thoughts. In fact, sharing your thoughts, whether locally or on the internet, is never far away as NoteMate.jl provides tools to enable your thoughts to be published on digital gardens. Finally, due to the way NoteMate.jl parses documents, NoteMate.jl can transform notes following the OKM and express them in different outputs irrespective of the implementation.","category":"page"},{"location":"#Current-Capabilities","page":"Home","title":"Current Capabilities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Currently, these are some of the high level capabilities NoteMate.jl can perform:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Ingest supported filetypes following OKM layout:\nMarkdown\nParsing of a OKM \"Note\" object to different support outputs:\nFranklin.jl Markdown\nStatic site deployment workflows supported for rapid digital garden creation:\nFranklin.jl Support \nCustom citation rendering and creation via pandoc, bibtex, and CSL ","category":"page"},{"location":"#Websites-Using-NoteMate.jl","page":"Home","title":"Websites Using NoteMate.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here are some websites that use NoteMate.jl to manage their website","category":"page"},{"location":"","page":"Home","title":"Home","text":"TheCedarPrince's Personal Website - a Franklin.jl-based website that hosts a blog, note archive, and their research endeavors.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install NoteMate.jl currently, one needs to run the following command in their Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/TheCedarPrince/NoteMate","category":"page"},{"location":"","page":"Home","title":"Home","text":"<!–TODO: Add final instructions before first release! –>","category":"page"},{"location":"#Long-Term-Vision-for-NoteMate.jl","page":"Home","title":"Long Term Vision for NoteMate.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NoteMate.jl helps with constructing digital gardens for sharing of ideas, insights and information syntheses quickly. This makes it a good choice for building digital gardens that can be grown with a high-quality, low-tech evidence chain.  Since NoteMate.jl follows a modular standard, we think it can be expanded to allow ingestion and translation between many different file formats with different inner-file structures in a bidirectional manner. As an example, pages in a digital garden may even be able to coalesce multiple notes using the ontology of a note system into aggregate notes in the future. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Since NoteMate.jl enforces a common document format with certain information always present, sufficient standardization is present to consider having digital gardens interlink on the web. Different webpages might reference one another in such ways that they can build off each other, letting people seamlessly jump between different people's ideas and then incorporate them into their own.  Using the approaches here within NoteMate.jl, users may eventually be able to also quickly analyze and understand their own knowledge base data that they can leverage to build on other connections across other knowledge bases or in the context of their own work and research.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<!–TODO: Add a philosophy section on the approach NoteMate takes–>","category":"page"}]
}
